#!/bin/bash
#
#    bl-conky-manager: BunsenLabs Conky selection and switcher script
#    Copyright (C) 2015/2019 damo    <damo@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################
#
#   Written by damo <damo@bunsenlabs.org> for BunsenLabs Linux, April 2015
#   Beta tested and stamped "zen" by <Sector11>
#
########################################################################
#
#   Conkys must be in $CONKYPATH
#   The name must end with "conky", conkyrc or be "*conky*.conf"
#
#   When the dialog opens, any running conkys will be checkmarked.
#
#   Click "OK" and all running conkys are stopped, and all checkmarked
#   conkys are started
#
#   To stop a conky just uncheck it, and "OK"
#
#   Running conkys are saved to a session file, and can be run with
#   the "bl-conky-session" script. To start the default conky session at
#   login, add the following line to autostart:
#
#     bl-conky-session --autostart &
#
#   Different saved-session files can be used by running the script with:
#
#           bl-conky-manager -f /path/to/sessionfile &
#           bl-conky-manager -z (opens gui entry dialog for filepath)
#
########################################################################

CONKYPATH="$HOME/.config/conky"
SESSIONFILE="$CONKYPATH/conky-sessionfile"
SESSIONS="$CONKYPATH/saved-sessions"    # to be used by a pipemenu
CONKYDEFAULT="$CONKYPATH/conky.conf"
BLDEFAULT="$CONKYPATH/BL-Default-conky.conf"

USAGE1='
    USAGE:  bl-conky-manager [OPTION]...FILES

    With no command option the script runs the gui

    -h,--help   : This USAGE help
    -f,--file   : FILEPATH : specify file to save session to
    -z          : Run gui filename entry dialog for new saved session
'
USAGE2='
    USAGE:  bl-conky-manager [OPTION]...FILES

    With no command option the script runs the gui

    -h,--help   : This USAGE help
    -f,--file   : FILEPATH : specify file to save session to
    -z          : Run gui filename entry dialog for new saved session

    When the dialog opens, any running conkys will be checkmarked.
    Click "OK" and all running conkys are stopped, and all
    checkmarked conkys are started.

    To stop a conky just uncheck it, and click "OK"

    EXAMPLES:
    Save session to a new saved-session file with:

        bl-conky-manager -f sessionfile-name

    To start the default conky session at login, add the
    following line to autostart:

        bl-conky-session --autostart &
'

### DIALOG VARIABLES
DLG="yad --center --undecorated --borders=20 "
DLGDEC="yad --center  --borders=20 "
TITLE="BunsenLabs Conky Manager"
WINICON="--window-icon=distributor-logo-bunsenlabs"
OK="--button=OK:0"
APPLY="--button=Apply:0"
CANCEL="--button=gtk-cancel:1"
CLOSE="--button=Close:1"

########## FUNCTIONS ###################################################
#conkyRunning(){    # find running conkys
##     make blank tempfile, to save running conky paths
#    TEMPFILE=$(mktemp --tmpdir conky.XXXX)
#    if [[ $(pidof conky) ]];then
##         test if default conky was started
#        for ARG in $(ps aux | grep  [c]onky | awk '{print $(NF-1)}');do
#            if [[ $ARG = "conky" ]]; then
#                echo "$CONKYDEFAULT" >> "$TEMPFILE"  # 'conky -q' probably used
#            else                            # send conky filepath to tempfile
#                for ARG in $(ps aux | grep  [c]onkyrc | awk '{print $(NF)}');do
#                    if [[ $ARG != "-q" ]];then
#                        if echo "$ARG" | grep -v "$HOME";then  # in case started without full path
#                           ARG="$HOME/$ARG"
#                       fi
#                        echo "$ARG" >> "$TEMPFILE"
#                    fi
#                done
#            fi
#        done
#    fi
##     remove any duplicates in tempfile
#    TEMPFILE2=$(mktemp --tmpdir conky.XXXX)
#    awk '!x[$0]++' "$TEMPFILE" > "$TEMPFILE2" && mv "$TEMPFILE2" "$TEMPFILE"
#}

fillArrays(){
#    if (( $1 != 0 ));then
    local num="$1"    # 1st arg: array index
#    else
#        num=0   # '~/.config/conky/conky.conf' added to array
#    fi

#    if (( num == 0 ));then
#        return #cPATH="$CONKYDEFAULT"
#          cARR="$USER/.config/conky/conky.conf"
#    else
        cPATH="$2"   # 2nd arg: full filepath to conky
        cARR="$3"    # 3rd arg: displayed name: "directory/*conky(rc)"
#    fi

    conkysPath[$num]="$cPATH"
    conkysArr[$num]="$cARR"
#    if grep -qx "$cPATH" "$TEMPFILE";then # if conky is running (read from tempfile)
    if pgrep -fc "^conky .*$cPATH( |$)" >/dev/null;then # if conky is running (use pgrep)
        checkArr[$num]="TRUE"       # make checkmark in dialog
    else
        checkArr[$num]="FALSE"
    fi
}

findConky(){
# search dirs for conkys files - looking for "conky" in the name
# if "*conky(rc)" then display it
#    num=0   # added default ~/.config/conky/conky.conf
#    fillArrays $num "$CONKYDEFAULT" "$USER/.config/conky/conky.conf"
    local num=0
    # find files in CONKYPATH with conky in the name
#    for x in $(find "$CONKYPATH" -type f );do
#        f=$(basename "$x")    # filename from filepath
#        if [[ $f = *conky.conf ]] || [[ $f = *conky ]] || [[ $f = *conkyrc ]];then    # filename ends with *conkyrc, *conky or *conky.conf
#             #get directory/conkyname to display in list
#            CONKY=$( echo "$x" | awk -F"/" '{print $(NF-1)"/"$NF}')
#            fillArrays $num "$x" "$CONKY"
#            num=$((num+1))
#        fi
#    done
    while IFS= read -r -d '' x;do
        f=$(basename "$x")    # filename from filepath
        if [[ $f = *conky*.conf ]] || [[ $f = *conky ]] || [[ $f = *conkyrc ]];then    # filename ends with *conkyrc, *conky or is *conky*.conf
            # get directory/conkyname to display in list
            CONKY=$( echo "$x" | awk -F"/" '{print $(NF-1)"/"$NF}')
            fillArrays $num "$x" "$CONKY"
            num=$((num+1))
        fi
    done < <(find "$CONKYPATH" -type f -print0)

}

writeSessions(){    # save a new sessionfile name for use by a menu
    SESSIONFILE="$CONKYPATH/$1"
    echo "sessionfile= $SESSIONFILE"
    if ! [[ -f $SESSIONS ]];then
        > "$SESSIONS"
    fi
    if grep -qx "$SESSIONFILE" "$SESSIONS";then # session was previously saved
        if [[ $2 = "-z" ]];then    # input was from input dialog, so ask OK?
            $DLG $WINICON --title="Conky sessionfile" --text="Filename already in use\n\nOverwrite it?" $CANCEL $OK
            if (( $? == 1 ));then
                exit 0
            fi
        else    # commandline is being used
            echo "Session was previously saved with the same name. Overwrite it? (y|N)"
            read -r ans
            case "$ans" in
                y|Y )   : #break
                        ;;
                *   )   exit 0
                        ;;
            esac
        fi
    else
        cp "$SESSIONS" "$SESSIONS.bkp"
        echo "$SESSIONFILE" >> "$SESSIONS"
    fi
}

loadDialog() {
    local -a retConky
    ## Populate dialog from array, get return value(s)
    RET=$($DLGDEC $WINICON --list --title="$TITLE" \
        --text="Session will be saved to:\n <b>$SESSIONFILE</b>" \
        --checklist --width=400 --height=500 --multiple \
        --column="Select:CHK" --column="Conky Name:TXT" $LISTCONKY \
        --separator=":" \
        $APPLY $CLOSE \
        )

    if [[ $? == 1 ]]; then # close button pressed
        # if session file is empty remove it, and restore previous saved-sessions file
        if [[ ! -s "$SESSIONFILE" ]];then
            rm "$SESSIONFILE"
            if  [[ -f $SESSIONS.bkp ]]; then
                mv "$SESSIONS.bkp" "$SESSIONS"
            fi
        fi
#        rm "$TEMPFILE"
        exit 0
    fi
    if ! [[ $RET ]];then  # No conkys chosen
        MSG="Nothing chosen.\n\nKill any running Conkys?"
        $DLG $WINICON --title="Conky Chooser" --text="$MSG" $OK $CANCEL
        if [[ $? = 1 ]];then
            # restore previous saved-sessions file
#            [[ -f $SESSIONS.bkp ]] && mv "$SESSIONS.bkp" "$SESSIONS"
#            rm "$TEMPFILE"
            return
#        else
#            killall conky
#            exit 0
        fi
    fi
#    else
    > "$SESSIONFILE"    # Create empty session file
    # loop through returned choices, add to array
    i=0
    OIFS=$IFS   # save Internal Field Separator
    IFS=":"     # separator is ":" in returned choices
    for name in $RET; do
        retConky[$i]="$name"
        i=$((i+1))
    done
    IFS=$OIFS   # reset IFS back to default

    # kill all conkys
    if [[ $(pidof conky) ]];then
        killall conky
    fi

    # Find the chosen conkys and start them
    for name in ${retConky[*]};do       # loop through checkmarked conky names
        for ((j=0; j<${#conkysPath[*]}; j++));do  # traverse through elements
            for f in ${conkysPath[j]};do    # compare with choice from dialog
                display=$( echo "$f" | awk -F"/" '{print $(NF-1)"/"$NF}')
                if [[ $display = "$name" ]];then
                    echo -e "conky -c $f & sleep 1s" >> "$SESSIONFILE"
                    #start the conky (adjust the sleep time if required)
                    conky -c "$f" & sleep 1s
                fi
            done
        done
    done
#    fi
}

######## END FUNCTIONS #################################################

# get args passed to script (session can be saved to a different file)
for arg in "$@";do
    case "$arg" in
        -h|--help   ) echo -e "$USAGE2"
                      echo
                      exit 0
                      ;;
        -f|--files  ) if [[ $2 ]];then
                        SESSIONFILE="$2"    # sessionfile has been specified
                        writeSessions "$SESSIONFILE"    # if sessionfile is new, write name to saved-sessions
                        break
                      else
                        echo
                        echo -e "\tNo saved-session file specified!"
                        echo -e "$USAGE1"
                        echo
                        exit 1
                      fi
                      ;;
        -z          ) SPATH=$($DLGDEC $WINICON --entry \
                        --title="Save Conky sessionfile" \
                        --entry-label="New saved session file:" \
                        --text="File to be saved in <b>$CONKYPATH/</b>\n\n" \
                        $OK $CANCEL \
                        )
                      (( $? == 1 )) && exit 0
                      if [[ -z $SPATH ]];then     # entry was empty
                          $DLG $WINICON --title="Conky sessionfile" --text="No file specified for new saved session\n\nExiting..." $OK
                          exit 1
                      else
                          writeSessions "$SPATH" "-z"   # saved session file from input dialog
                      fi
                      ;;
#        *           ) if ! [[ $arg ]];then # (If there are no args, for loop is not executed.)
#                        SESSIONFILE="$SESSIONFILE" # sessionfile is default ( variable is already set)
#                        break
#                      else
#                        echo -e "$USAGE1"
#                        exit 1
#                      fi
        *           ) echo -e "$USAGE1"
                      exit 1
                      ;;
    esac
done

# test for ~/.config/conky/conky.conf, create a link to the default conky if necessary
if ! [[ -e $CONKYDEFAULT ]];then
    if [[ -e $BLDEFAULT ]];then
        ln -s "$BLDEFAULT" "$CONKYDEFAULT"
    else
        echo "Default conky.conf not found"
    fi
fi

while true;do
#   These declarations are not needed for global indexed arrays.
#    declare -a conkysArr
#    declare -a checkArr
#    declare -a conkysPath

    # get conky directories in .conky, add to array
#    conkyRunning
    findConky

    # loop through arrays, and build list text for yad dialog
    unset LISTCONKY
    for ((j=0; j<${#conkysArr[*]}; j++));do
      LISTCONKY="$LISTCONKY${checkArr[j]} ${conkysArr[j]} "
    done

    loadDialog "$LISTCONKY"

#    rm "$TEMPFILE"
done

exit 0
