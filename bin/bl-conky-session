#!/bin/bash
#
#    bl-conky-session: read saved BunsenLabs Conky session file(s) and start the conkys
#    Copyright (C) 2015 damo    <damo@bunsenlabs.org>
#                  2021 John Crawley <john@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#   To start the default conky session at login, add the following line
#   to config/openbox/autostart:
#
#      bl-conky-session &
#
########################################################################
CONKYPATH="$HOME/.config/conky"
BLDEFAULT="$CONKYPATH/BL-Default-conky.conf"
CONKYDEFAULT="$CONKYPATH/conky.conf" # not normally used
DEFAULTSESSFILE="$CONKYPATH/conky-sessionfile"
STARTSESSION="$CONKYPATH/conky-startup-session" # symlink to chosen startup session (DEFAULTSESSFILE by default)
BKP_SFX=".$(date +"%Y%m%d-%H%M%S").conkysess~"
USAGE='bl-conky-session is a script to parse saved BunsenLabs Conky session file(s)
and start the conkys

Usage: bl-conky-session [OPTION(S)]...FILES

With no command argument, the script uses "~/.config/conky/conky-startup-session"
which is a symlink pointing by default to "~/.config/conky/conky-sessionfile".
Change the symlink to make a different sessionfile the default at startup.

If not absolute, sessionfile paths are assumed to be relative to ~/.config/conky/

Options:
        --default       : add the default sessionfile to a list of files
            sessionfile1  sessionfile2 etc
        --kill-running  : kill current running conkys without prompting

Examples:
    Run specified sessionfile at login:

            "bl-conky-session /path/to/sessionfile"

    Run default sessionfile, do not prompt about killing current conkys:

            "bl-conky-session --kill-running"

    Run several conky sessionfiles, including default:

            "bl-conky-session sessionfile1 --default sessionfile2 etc"
'

# look for a help option somewhere
for i in "$@"
do
    case "$i" in
    -h|--help)
        echo "$USAGE"
        exit 0
        ;;
    esac
done

### DIALOG VARIABLES
DLG="yad --center --undecorated --borders=20 "
TITLE="BunsenLabs Conky Session"
WINICON="--window-icon=distributor-logo-bunsenlabs"
OK="--button=OK:0"
CANCEL="--button=gtk-cancel:1"

########################################################################

killConkys(){
    if pidof conky &>/dev/null; then
        if ((kill)); then
            killall conky && sleep 0.2s || return 1
        else
            MSG="Kill running conkys first?"
            $DLG $WINICON --title="$TITLE" --text="$MSG" "$CANCEL" --button="Don't kill":2 "$OK"
            case $? in            # kill all conkys
            0)
                killall conky && sleep 0.2s || return 1
                ;;
            1)
                return 1
                ;;
            2)
                return 0
                ;;
            esac
        fi
    fi
}

# usage: loadSession <sessionfile>
loadSession(){
    local sessfile CPATH_REGEX WMC_REGEX needRewrite conkys c path target
    sessfile=$1
    CPATH_REGEX="-c '(.*(conky.*\.conf|conky|conkyrc))'([[:blank:]]+|$)"
    WMC_REGEX='wmctrl -s ([0-9]{1,2})[[:blank:]]+'
    needRewrite=false
    mapfile -t conkys < "$sessfile"
    for i in "${!conkys[@]}"; do # go through indexes
        c=${conkys[i]}
        if [[ ${c%% *} = conky ]]; then # old style: first word is 'conky'
            if [[ $c =~ $CPATH_REGEX ]]; then
                conkys[i]=${BASH_REMATCH[1]} # rewrite with filepath only
            else
                echo "$0: WARNING: failed to parse line $c in $sessfile" >&2
                conkys[i]='' # discard line
            fi
            needRewrite=true
        elif [[ ${c%% *} = wmctrl ]]; then # old style, on specific desktop
            if [[ $c =~ ${WMC_REGEX}.*${CPATH_REGEX} ]]; then
                conkys[i]="D[${BASH_REMATCH[1]}] ${BASH_REMATCH[2]}" # format: 'D[<desktop>] <path>'
            else
                echo "$0: WARNING: failed to parse line $c in $sessfile" >&2
                conkys[i]='' # discard line
            fi
            needRewrite=true
        else
            continue # assume line (in fact, whole file probably) is in new style
        fi
    done
    if [[ $needRewrite = true ]]; then # should only happen once
        target=$(readlink -f "$sessfile") # in case $sessfile is a symlink
        cp "$target" "${target}${BKP_SFX}" # make backup
        echo "$0: reformatting $sessfile"
        :> "$sessfile"
        for path in "${conkys[@]}"; do
            echo "$path" >> "$sessfile"
        done
    fi
    for path in "${conkys[@]}"; do
        ALL_CONKYS[$path]=1 # copy conkys to global array for launching, no duplicate lines
    done
}

launchConkys(){
    local WINID_REGEX path desktop datafile
    WINID_REGEX='drawing to created window \((0[xX][0-9a-fA-F]+)\)'
    set -m # enable job control so forked conkys are immune to signals (although unnecessary when conky is forked to background in config)
    for path in "${!ALL_CONKYS[@]}"; do
        case ${path%% *} in # first word
        D\[*\]) # D[1]... is assumed to be a sufficiently unlikely beginning of a conky filepath
            desktop=${path%%]*}
            desktop=${desktop#*[}
            path=${path#* }
            [[ -r $path ]] || { echo "$0: WARNING: cannot read $path" >&2 ; continue;}
            datafile=$(mktemp)
            conky -c "$path" >> "$datafile" 2>&1 &
            disown
            sleep 0.5
            [[ $(<"$datafile") =~ $WINID_REGEX ]] && id=${BASH_REMATCH[1]} # no need to check file line by line
            [[ -n $id ]] && wmctrl -i -r "$id" -t "$desktop"
            rm "$datafile"
            ;;
        *) # assume line is a clean filepath
            [[ -r $path ]] || { echo "$0: WARNING: cannot read $path" >&2 ; continue;}
            conky -c "$path" >/dev/null 2>&1 &
            disown
            sleep 0.5
            ;;
        esac
    done
    set +m
}

########################################################################

if [[ ! -f $DEFAULTSESSFILE ]] ; then
    echo "$0: Failed to locate ${DEFAULTSESSFILE}, generating default..." >&2
    if [[ -f $BLDEFAULT ]]; then
        echo "$BLDEFAULT" > "$DEFAULTSESSFILE"
    elif [[ -f $CONKYDEFAULT ]]; then
        echo "$0: $BLDEFAULT not found, using $CONKYDEFAULT in session file." >&2
        echo "$CONKYDEFAULT" > "$DEFAULTSESSFILE"
    else
        echo "$0: unable to determine conky config file for this session." >&2
        exit 1
    fi
fi

if [[ ! -f $STARTSESSION ]]; then # can change STARTSESSION symlink to make any sessfile the startup default
    echo "$0: generating missing symlink $STARTSESSION to $DEFAULTSESSFILE"
    ln -s "$DEFAULTSESSFILE" "$STARTSESSION" || echo "$0: WARNING: failed to create symlink $STARTSESSION" >&2
fi

kill=0 # will evaluate with arithmetic command, so 1 = true
declare -A sessions # keys hold all session files passed, without duplicates
while [[ -n $1 ]]
do
    case "$1" in
#    '-h'|'--help') # already checked above
#        echo -e "$USAGE"
#        exit 0
#        ;;
    '--kill-running')
        kill=1
        ;;
    '--autostart') # this argument now ignored
        :
        ;;
    '--default')
        sessions["$STARTSESSION"]=1
        ;;
    -*)
        echo "$0: ${1}: no such option" >&2
        exit 1
        ;;
    *)
        arg=$1
        [[ $arg = /* ]] || arg="$CONKYPATH/$arg" # was relative path
        if [[ -f "$arg" ]]; then
            sessions["$arg"]=1
        else
            echo "$0: WARNING: session file $arg does not exist." >&2
        fi
        ;;
    esac
    shift
done

killConkys || exit

declare -A ALL_CONKYS # will hold conkys to be launched from all sessionfiles, no duplicates

if (( ${#sessions[@]} > 0 )); then
    for SESSION in "${!sessions[@]}";do # run the conkys in the sessionfiles
        loadSession "$SESSION"
    done
else    # no sessionfiles passed to bl-conky-manager
    loadSession "$STARTSESSION"   # use whichever file symlink conky-startup-session points to (conky-sessionfile by default)
fi

launchConkys
