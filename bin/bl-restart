#!/bin/bash
#
#    bl-restart: a script to restart all instances of a process name
#    Copyright (C) 2015 damo    <damo@bunsenlabs.org>
#    Copyright (C) 2015-2021  John Crawley <john@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

HELP='bl-restart is a script to restart all running instances of
any process name passed

Usage: bl-restart <name>
   or: bl-restart -h|--help

Optional arguments:
    -h | --help  Show this message (no other options are supported at this time)

Each running process is stopped with SIGTERM.

All previously running commands are then re-run, forked and disowned,
with any duplicates removed.
'
wait_timeout=10s

# look for a help option somewhere
for i in "$@"
do
    case "$i" in
    -h|--help)
        echo "$HELP"
        exit 0
        ;;
    esac
done

name=$1

pgrep -x -u "$USER" "$name" >/dev/null || {
    echo "$0: no $name processes running"
    exit 0
}

declare -A commands # associative array
tailpids=()
index=1
while read -r pid cmd; do
    [[ -n $pid ]] || { echo "$0: no $name processes found belonging to $USER" >&2; exit 1;}
    commands["$cmd"]=C${index} # duplicate commands will be launched only once
    mapfile -d '' -t "C${index}" < "/proc/${pid}/cmdline" # use NULL delimiter to split cmdline into array C$index
    (( index++ ))
    kill -TERM "$pid" || { echo "$0: ERROR: failed to kill $pid" >&2; exit 1;}
    tail -f /dev/null --pid="$pid" & tailpids+=($!) # wait in background for process to die
done <<< "$(pgrep -ax "$name" -u "$USER")"
# an extra "tail" process for each killed process is the price of being able to "wait" for them to close
# "wait" can only wait for children of this script

trap 'exit 1' SIGUSR1
{ sleep $wait_timeout; echo "$0: Some processes still running after $wait_timeout, killing $0" >&2; kill -s SIGUSR1 $$; } & sleep_pid=$!

wait "${tailpids[@]}" # wait till all forked tail commands have terminated

kill "$sleep_pid"
wait "$sleep_pid" >/dev/null # suppress "terminated" message after killing

set -m # enable job control so forked processes are immune to signals from script

declare -n CMD # CMD is a nameref
for CMD in "${commands[@]}" # CMD will refer to each array name in turn
do
    "${CMD[@]}" >/dev/null 2>&1 &
    disown
    sleep 0.2
done

set +m
