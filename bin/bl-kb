#!/usr/bin/env python3
#
#    bl-kb: a script to read openbox's rc.xml and write out the keybinds
#    Copyright (C) 2010 wlourf
#    Copyright (C) 2015 damo    <damo@bunsenlabs.org>
#    Copyright (C) 2018 Jens John <dev@2ion.de>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################
#
# This script reads the keybinds configuration file
# ("$HOME/.config/openbox/rc.xml") and writes them to a text file
# ("$HOME/.config/openbox/kbinds.txt").  The script is used by bl-kb-pipemenu to
# pipe the output to the Openbox menu, or to display keybinds in a separate
# window
#
# Based on a script by wlourf 07/03/2010
# <http://u-scripts.blogspot.com/2010/03/how-to-display-openboxs-shortcuts.html>
#
# The original script parsed the keyboard and mouse commands from rc.xml, and
# passed them to Conkys to display on screen
#
# April 2015
#   : This script outputs the keyboard keybinds to terminal or, with a "--gui"
#   argument will display the output in a text window as well
#
#   Written by damo <damo@bunsenlabs.org> for BunsenLabs Linux, April 2015
#
########################################################################
#
# When the Openbox config schema version changes, you need to adjust the XML
# namespace alias in read_keybindings().
#
########################################################################

from collections import OrderedDict
from lxml import etree
from shutil import which
from typing import List
import argparse
import os
import subprocess
import sys

def read_keybindings(openbox_rc: str) -> OrderedDict:
    """ Reads the Openbox XML keybind configuration from openbox_rc (which must
    be a valid Openbox XML configuration file) and returns a Python-native
    representation in the following structure:
        {
            key: [
                (effect_type, effect_param),
                (effect_type, effect_param),
                (...)
            ]
        }
    """

    ns = { "namespaces": { "A": "http://openbox.org/3.4/rc" } }
    data = OrderedDict()

    with open(openbox_rc, "r") as FILE:
        xml = etree.parse(FILE)

    for keybind in xml.xpath("/A:openbox_config/A:keyboard/A:keybind", **ns):
        key = keybind.xpath("@key")[0]
        effects = []
        for action in keybind.xpath("A:action", **ns):
            name = action.xpath("@name")[0]
            if name == "Execute":
                cmd = action.xpath("A:command", **ns)[0].text
                effects.append(("x", cmd,))
            elif name == "ShowMenu":
                menu = action.xpath("A:menu", **ns)[0].text
                effects.append(("o", menu,))
            else:
                effects.append(("o", name,))
        data[key] = effects

    return data

def aggregate_effects(effects:list) -> list:
    _effects = []
    types = set(map(lambda e: e[0], effects))
    for t in types:
        agg_sep = "; " if t == "x" else ", "
        agg_effects = filter(lambda e: e[0] == t, effects)
        _effects.append(
            (t, agg_sep.join(map(lambda e: e[1], agg_effects)),))

    return _effects

def keybind2lines(key: str, effects: list) -> List[str]:
    for effect_type, effect_params in aggregate_effects(effects):
        yield "{} {:<16}\t{}".format(effect_type, key, effect_params)

def keybind2readabletext(key: str, effects: list) -> List[str]:
    def makeline(effect_type: str, key: str, effect_params: str):
        return "{:2}\t{:<16}\t{}".format(effect_type, key, effect_params)
    for (effect_type, effect_params) in aggregate_effects(effects):
        yield makeline(effect_type, key, effect_params)

def emit_textfile(path: str, bindings: dict) -> None:
    with open(path, "w") as FILE:
        for key, effects in bindings.items():
            for line in keybind2readabletext(key, effects):
                print(line, file=FILE)

def emit_stdout(bindings: dict) -> None:
    for key, effects in bindings.items():
        for line in keybind2lines(key, effects):
            print(line)

def emit_gui(kbinds_path: str, bindings: dict) -> None:
    yad_binary = which("yad")
    if yad_binary is None:
        raise Exception("Could not find 'yad' in $PATH.")
    subprocess.run([
        yad_binary,
        "--text-info",
        "--title='Openbox Keybinds'",
        "--window-icon=distributor-logo-bunsenlabs",
        "--filename={}".format(kbinds_path),
        "--width=700",
        "--height=700",
        "--fontname=Monospace",
        "--button=gtk-close"
    ], check=True)

def getopts() -> argparse.Namespace:
    ap = argparse.ArgumentParser(description="Display Openbox key bindings",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    ap.add_argument("-g", "--gui", action="store_true", default=False,
            help="display keybinds in a text window")
    ap.add_argument("--openbox-rc",
            default="{}/.config/openbox/rc.xml".format(os.getenv("HOME", "/root")),
            help="Path to Openbox's rc.xml")
    ap.add_argument("--openbox-kbinds",
            default="{}/.config/openbox/kbinds.txt".format(os.getenv("HOME", "/root")),
            help="Output file to save the keybind list to")
    return ap.parse_args()

if __name__ == "__main__":
    opts = getopts()

    if os.access(opts.openbox_rc, os.F_OK | os.R_OK):
        bindings = read_keybindings(opts.openbox_rc)
    else:
        print("Openbox RC file not readable: {}".format(opts.openbox_rc),
                file=sys.stderr)
        sys.exit(1)

    try:
        emit_textfile(opts.openbox_kbinds, bindings)
    except Exception as err:
        print("Failed to write kbinds text file: {}".format(err), file=sys.stderr)
        sys.exit(1)

    try:
        if opts.gui:
            emit_gui(opts.openbox_kbinds, bindings)
        else:
            emit_stdout(bindings)
    except Exception as err:
        print("Failed to show bindings: {}".format(err),file=sys.stderr)
        sys.exit(1)

    sys.exit(0)
