#!/bin/bash
#
#    bl-tint2restart: a script to restart all tint2 instances
#    Copyright (C) 2015 damo    <damo@bunsenlabs.org>
#    Copyright (C) 2015-2016  John Crawley <john@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

HELP='bl-tint2restart is a script to restart all running instances of tint2

Usage: bl-tint2restart
   or: bl-tint2restart -h|--help

Optional arguments:
    -h | --help  Show this message (no other options are supported at this time)

Each running tint2 process is stopped with SIGTERM, any left running
are then stopped with SIGKILL. (This second kill may no longer be
necessary with the current tint2.)

All previously running tint2 commands are then re-run, forked and disowned,
with any duplicates removed.
'
# look for a help option somewhere
for i in "$@"
do
    case "$i" in
    -h|--help)
        echo "$HELP"
        exit 0
        ;;
    esac
done

pgrep -x -u "$USER" tint2 >/dev/null || {
    echo "$0: no tint2 processes running"
    exit 0
}

declare -A commands # associative array

while read pid cmd; do
    if [[ ${cmd%% *} = tint2 ]]; then
        kill "$pid"
        commands[$cmd]=1 # duplicate commands will be launched only once
    fi
done <<< "$(pgrep -ax tint2)"

sleep 1

# any processes still running will be killed with SIGKILL
while read pid cmd; do
    if [[ ${cmd%% *} = tint2 ]]; then
        kill -KILL "$pid"
        commands[$cmd]=1
    fi
done <<< "$(pgrep -ax tint2)"

sleep 1

set -m # enable job control so forked tint2 is immune to signals from script
for i in "${!commands[@]}" # go through the indexes
do
    $i >/dev/null 2>&1 &
    disown
    sleep 0.2
done
set +m

#sleep 1
#bl-compositor --restart  # restart compositor

exit 0
